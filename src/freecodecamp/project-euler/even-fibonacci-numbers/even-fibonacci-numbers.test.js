/**
 * FreeCodeCamp Problem: Even Fibonacci Numbers
 * Category: Project Euler
 * Difficulty: Easy
 * Topics: Math, Fibonacci, Sequence
 *
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms.
 * By starting with 1 and 2, the first 10 terms will be:
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 *
 * By considering the terms in the Fibonacci sequence whose values do not exceed n,
 * find the sum of the even-valued terms.
 *
 * Tests:
 * 1. fiboEvenSum(10) should return a number.
 * 2. Your function should return an even value.
 * 3. Your function should sum the even-valued Fibonacci numbers: fiboEvenSum(8) should return 10.
 * 4. fiboEvenSum(10) should return 10.
 * 5. fiboEvenSum(34) should return 44.
 * 6. fiboEvenSum(60) should return 44.
 * 7. fiboEvenSum(1000) should return 798.
 * 8. fiboEvenSum(100000) should return 60696.
 * 9. fiboEvenSum(4000000) should return 4613732.
 */
import { describe, it, expect } from "vitest";
import * as fiboFunctions from "./even-fibonacci-numbers.js";

const {
  default: fiboEvenSum,
  fiboEvenSumOptimizedSpace,
  fiboEvenSumOnlyEvens,
  fiboEvenSumCleanLoop,
  fiboEvenSumClosedForm,
} = fiboFunctions;

describe("Even Fibonacci Numbers - All Implementations", () => {
  // Test cases that all implementations should pass
  const testCases = [
    [10, 10],
    [8, 10],
    [34, 44],
    [60, 44],
    [1000, 798],
    [100000, 60696],
    [4000000, 4613732],
  ];

  describe("Original Implementation (fiboEvenSum)", () => {
    it("should return a number for fiboEvenSum(10)", () => {
      expect(typeof fiboEvenSum(10)).toBe("number");
    });

    it("should return an even value for fiboEvenSum(10)", () => {
      expect(fiboEvenSum(10) % 2).toBe(0);
    });

    testCases.forEach(([input, expected]) => {
      it(`fiboEvenSum(${input}) should return ${expected}`, () => {
        expect(fiboEvenSum(input)).toBe(expected);
      });
    });
  });

  describe("Space Optimized (fiboEvenSumOptimizedSpace)", () => {
    testCases.forEach(([input, expected]) => {
      it(`fiboEvenSumOptimizedSpace(${input}) should return ${expected}`, () => {
        expect(fiboEvenSumOptimizedSpace(input)).toBe(expected);
      });
    });
  });

  describe("Only Evens Optimized (fiboEvenSumOnlyEvens)", () => {
    testCases.forEach(([input, expected]) => {
      it(`fiboEvenSumOnlyEvens(${input}) should return ${expected}`, () => {
        expect(fiboEvenSumOnlyEvens(input)).toBe(expected);
      });
    });
  });

  describe("Clean Loop Optimized (fiboEvenSumCleanLoop)", () => {
    testCases.forEach(([input, expected]) => {
      it(`fiboEvenSumCleanLoop(${input}) should return ${expected}`, () => {
        expect(fiboEvenSumCleanLoop(input)).toBe(expected);
      });
    });
  });

  describe("Closed Form (fiboEvenSumClosedForm)", () => {
    testCases.forEach(([input, expected]) => {
      it(`fiboEvenSumClosedForm(${input}) should return ${expected}`, () => {
        expect(fiboEvenSumClosedForm(input)).toBe(expected);
      });
    });
  });
});
