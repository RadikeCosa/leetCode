/**
 * FreeCodeCamp Problem: Even Fibonacci Numbers
 * Category: Project Euler
 * Difficulty: Easy
 * Topics: Math, Fibonacci, Sequence
 *
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms.
 * By starting with 1 and 2, the first 10 terms will be:
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 *
 * By considering the terms in the Fibonacci sequence whose values do not exceed n,
 * find the sum of the even-valued terms.
 */
function fiboEvenSum(n) {
  let a = 1;
  let b = 2;
  let evens = [];

  // Evaluar el primer término par (2) antes de entrar al loop
  if (b <= n && b % 2 === 0) {
    evens.push(b);
  }

  while (b <= n) {
    // Generar siguiente término
    let next = a + b;
    a = b;
    b = next;

    // Si el nuevo término es par y no excede n, agregarlo
    if (b <= n && b % 2 === 0) {
      evens.push(b);
    }
  }

  return evens.reduce((total, num) => total + num, 0);
}

module.exports = fiboEvenSum;
module.exports.fiboEvenSumOptimizedSpace = fiboEvenSumOptimizedSpace;
module.exports.fiboEvenSumOnlyEvens = fiboEvenSumOnlyEvens;
module.exports.fiboEvenSumCleanLoop = fiboEvenSumCleanLoop;
module.exports.fiboEvenSumClosedForm = fiboEvenSumClosedForm;

function fiboEvenSumOptimizedSpace(n) {
  let a = 1;
  let b = 2;
  let sum = 0;

  // Evaluar el primer término par (2) antes de entrar al loop
  if (b <= n && b % 2 === 0) {
    sum += b;
  }

  while (b <= n) {
    // Generar siguiente término
    let next = a + b;
    a = b;
    b = next;

    // Si el nuevo término es par y no excede n, agregarlo
    if (b <= n && b % 2 === 0) {
      sum += b;
    }
  }

  return sum;
}

function fiboEvenSumOnlyEvens(n) {
  let prevEven = 2;
  let currEven = 8; // El siguiente término par en la secuencia
  let sum = 2; // Iniciar con el primer término par
  while (currEven <= n) {
    sum += currEven;
    // Generar el siguiente término par
    let nextEven = 4 * currEven + prevEven;
    prevEven = currEven;
    currEven = nextEven;
  }
  return sum;
}

function fiboEvenSumCleanLoop(n) {
  let prevEven = 0; // Empezar desde 0
  let currEven = 2; // Primer par
  let sum = 0;

  while (currEven <= n) {
    sum += currEven; // ← Ahora TODOS los pares se evalúan igual
    let nextEven = 4 * currEven + prevEven;
    prevEven = currEven;
    currEven = nextEven;
  }
  return sum;
}

// Función auxiliar para calcular Fibonacci eficientemente
function fibonacci(n) {
  if (n <= 1) return n;

  let a = 0,
    b = 1;
  for (let i = 2; i <= n; i++) {
    const temp = a + b;
    a = b;
    b = temp;
  }
  return b;
}

// Función para encontrar el máximo k tal que F(3k) <= n
function findMaxK(n) {
  let k = 0;
  while (fibonacci(3 * (k + 1)) <= n) {
    k++;
  }
  return k;
}

// Fórmula cerrada: Suma de números pares de Fibonacci usando fórmula matemática
function fiboEvenSumClosedForm(n) {
  if (n < 2) return 0;

  // Encontrar el mayor k donde F(3k) <= n
  const k = findMaxK(n);

  // Fórmula cerrada correcta: S = (F(3k+2) - 1) / 2
  const f_3k_plus_2 = fibonacci(3 * k + 2);
  return (f_3k_plus_2 - 1) / 2;
}
